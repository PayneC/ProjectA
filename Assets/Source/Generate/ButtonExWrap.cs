//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ButtonExWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ButtonEx), typeof(UnityEngine.UI.Button));
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("disabledSpriteInfo", get_disabledSpriteInfo, set_disabledSpriteInfo);
		L.RegVar("highlightedSpriteInfo", get_highlightedSpriteInfo, set_highlightedSpriteInfo);
		L.RegVar("pressedSpriteInfo", get_pressedSpriteInfo, set_pressedSpriteInfo);
		L.RegVar("useClickAnimation", get_useClickAnimation, set_useClickAnimation);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_disabledSpriteInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			SpriteInfo ret = obj.disabledSpriteInfo;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index disabledSpriteInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_highlightedSpriteInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			SpriteInfo ret = obj.highlightedSpriteInfo;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index highlightedSpriteInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pressedSpriteInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			SpriteInfo ret = obj.pressedSpriteInfo;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pressedSpriteInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useClickAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			bool ret = obj.useClickAnimation;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useClickAnimation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_disabledSpriteInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			SpriteInfo arg0 = StackTraits<SpriteInfo>.Check(L, 2);
			obj.disabledSpriteInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index disabledSpriteInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_highlightedSpriteInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			SpriteInfo arg0 = StackTraits<SpriteInfo>.Check(L, 2);
			obj.highlightedSpriteInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index highlightedSpriteInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pressedSpriteInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			SpriteInfo arg0 = StackTraits<SpriteInfo>.Check(L, 2);
			obj.pressedSpriteInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pressedSpriteInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useClickAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ButtonEx obj = (ButtonEx)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useClickAnimation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useClickAnimation on a nil value");
		}
	}
}

