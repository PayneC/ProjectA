//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RawImageExWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(RawImageEx), typeof(UnityEngine.UI.RawImage));
		L.RegFunction("SetTextureName", SetTextureName);
		L.RegFunction("SetTexture", SetTexture);
		L.RegFunction("Copy", Copy);
		L.RegFunction("SetInfo", SetInfo);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("textureName", get_textureName, null);
		L.RegVar("isRender", get_isRender, set_isRender);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RawImageEx obj = (RawImageEx)ToLua.CheckObject<RawImageEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetTextureName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RawImageEx obj = (RawImageEx)ToLua.CheckObject<RawImageEx>(L, 1);
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.SetTexture(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Copy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RawImageEx arg0 = (RawImageEx)ToLua.CheckObject<RawImageEx>(L, 1);
			UnityEngine.UI.RawImage arg1 = (UnityEngine.UI.RawImage)ToLua.CheckObject<UnityEngine.UI.RawImage>(L, 2);
			RawImageEx.Copy(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RawImageEx obj = (RawImageEx)ToLua.CheckObject<RawImageEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetInfo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RawImageEx obj = (RawImageEx)o;
			string ret = obj.textureName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RawImageEx obj = (RawImageEx)o;
			bool ret = obj.isRender;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isRender on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RawImageEx obj = (RawImageEx)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isRender = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isRender on a nil value");
		}
	}
}

