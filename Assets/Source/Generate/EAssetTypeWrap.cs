//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EAssetTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(EAssetType));
		L.RegVar("NONE", get_NONE, null);
		L.RegVar("LUA", get_LUA, null);
		L.RegVar("ENTITY", get_ENTITY, null);
		L.RegVar("TEXTURE", get_TEXTURE, null);
		L.RegVar("SCENE", get_SCENE, null);
		L.RegVar("UI", get_UI, null);
		L.RegVar("ATLAS", get_ATLAS, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<EAssetType>.Check = CheckType;
		StackTraits<EAssetType>.Push = Push;
	}

	static void Push(IntPtr L, EAssetType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(EAssetType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NONE(IntPtr L)
	{
		ToLua.Push(L, EAssetType.NONE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUA(IntPtr L)
	{
		ToLua.Push(L, EAssetType.LUA);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENTITY(IntPtr L)
	{
		ToLua.Push(L, EAssetType.ENTITY);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TEXTURE(IntPtr L)
	{
		ToLua.Push(L, EAssetType.TEXTURE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SCENE(IntPtr L)
	{
		ToLua.Push(L, EAssetType.SCENE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UI(IntPtr L)
	{
		ToLua.Push(L, EAssetType.UI);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ATLAS(IntPtr L)
	{
		ToLua.Push(L, EAssetType.ATLAS);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		EAssetType o = (EAssetType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

