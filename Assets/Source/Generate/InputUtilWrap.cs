//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class InputUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("InputUtil");
		L.RegFunction("SetJoystick", SetJoystick);
		L.RegFunction("AddJoystick", AddJoystick);
		L.RegFunction("AddAction", AddAction);
		L.RegFunction("DoAction", DoAction);
		L.RegVar("onLeftJoystick", get_onLeftJoystick, set_onLeftJoystick);
		L.RegVar("onAction", get_onAction, set_onAction);
		L.RegFunction("Joystick", InputUtil_Joystick);
		L.RegFunction("OnAction", InputUtil_OnAction);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetJoystick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			InputUtil.SetJoystick(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddJoystick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			InputUtil.Joystick arg0 = (InputUtil.Joystick)ToLua.CheckDelegate<InputUtil.Joystick>(L, 1);
			InputUtil.AddJoystick(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			InputUtil.OnAction arg0 = (InputUtil.OnAction)ToLua.CheckDelegate<InputUtil.OnAction>(L, 1);
			InputUtil.AddAction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			InputUtil.DoAction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onLeftJoystick(IntPtr L)
	{
		try
		{
			ToLua.Push(L, InputUtil.onLeftJoystick);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onAction(IntPtr L)
	{
		try
		{
			ToLua.Push(L, InputUtil.onAction);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onLeftJoystick(IntPtr L)
	{
		try
		{
			InputUtil.Joystick arg0 = (InputUtil.Joystick)ToLua.CheckDelegate<InputUtil.Joystick>(L, 2);
			InputUtil.onLeftJoystick = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onAction(IntPtr L)
	{
		try
		{
			InputUtil.OnAction arg0 = (InputUtil.OnAction)ToLua.CheckDelegate<InputUtil.OnAction>(L, 2);
			InputUtil.onAction = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InputUtil_Joystick(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<InputUtil.Joystick>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<InputUtil.Joystick>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InputUtil_OnAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<InputUtil.OnAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<InputUtil.OnAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

