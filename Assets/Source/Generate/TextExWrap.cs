//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TextExWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TextEx), typeof(UnityEngine.UI.Text));
		L.RegFunction("GetFontName", GetFontName);
		L.RegFunction("SetFontName", SetFontName);
		L.RegFunction("SetFont", SetFont);
		L.RegFunction("Copy", Copy);
		L.RegFunction("SetInfo", SetInfo);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("preferredHeight", get_preferredHeight, null);
		L.RegVar("preferredWidth", get_preferredWidth, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFontName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TextEx obj = (TextEx)ToLua.CheckObject<TextEx>(L, 1);
			string o = obj.GetFontName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFontName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TextEx obj = (TextEx)ToLua.CheckObject<TextEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetFontName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFont(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TextEx obj = (TextEx)ToLua.CheckObject<TextEx>(L, 1);
			UnityEngine.Font arg0 = (UnityEngine.Font)ToLua.CheckObject(L, 2, typeof(UnityEngine.Font));
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetFont(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Copy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TextEx obj = (TextEx)ToLua.CheckObject<TextEx>(L, 1);
			UnityEngine.UI.Text arg0 = (UnityEngine.UI.Text)ToLua.CheckObject<UnityEngine.UI.Text>(L, 2);
			obj.Copy(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TextEx obj = (TextEx)ToLua.CheckObject<TextEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetInfo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_preferredHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TextEx obj = (TextEx)o;
			float ret = obj.preferredHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index preferredHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_preferredWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TextEx obj = (TextEx)o;
			float ret = obj.preferredWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index preferredWidth on a nil value");
		}
	}
}

